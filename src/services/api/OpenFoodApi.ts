/**
 * OpenFood API Swagger documentation
 * OpenAPI spec version: 2.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { Http, Headers, URLSearchParams }                    from '@angular/http';
import { RequestMethod, RequestOptions, RequestOptionsArgs } from '@angular/http';
import { Response }                                          from '@angular/http';

import { Observable }                                        from 'rxjs/Observable';
import 'rxjs/add/operator/map';

import * as models                                           from '../model/models';
import { BASE_PATH }                                         from '../variables';
import { Configuration }                                     from '../configuration';

/* tslint:disable:no-unused-variable member-ordering */


@Injectable()
export class OpenFoodApi {
    protected basePath = 'https://www.openfood.ch/api/v2';
    public defaultHeaders: Headers = new Headers();
    public configuration: Configuration = new Configuration();

    constructor(protected http: Http, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {

        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
        } else {
          this.configuration = new Configuration();
        }

        if(this.configuration.apiKey && this.configuration.apiKey.length > 0) {
          this.defaultHeaders.append('Authorization','Token token=' + this.configuration.apiKey);
        }
    }

    /**
     *
     * Extends object by coping non-existing properties.
     * @param objA object to be extended
     * @param objB source object
     */
    private extendObj<T1,T2>(objA: T1, objB: T2) {
        for(let key in objB){
            if(objB.hasOwnProperty(key)){
                (objA as any)[key] = (objB as any)[key];
            }
        }
        return <T1&T2>objA;
    }

    /**
     *
     * Returns a single Product from OpenFood in JSON-API format.
     * @param id ID of the Product
     */
    public findProductById(id: number, extraHttpRequestParams?: any): Observable<models.Product> {
        return this.findProductByIdWithHttpInfo(id, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     *
     * All products in the OpenFood database in JSON-API format.
     * @param include Include the Images and / or Nutrients in the returned JSON. Use "images"; for Images and nutrients" for Nutrients.
     * @param barcodes Array of barcodes to search by, using boolean OR for multiple values.
     * @param page Paging for the result set. Default products per page is 20.
     */
    public listProducts(include?: Array<string>, barcodes?: Array<number>, page?: string, extraHttpRequestParams?: any): Observable<models.ProductResponse> {
        return this.listProductsWithHttpInfo(include, barcodes, page, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }


    /**
     *
     * Returns a single Product from OpenFood in JSON-API format.
     * @param id ID of the Product
     */
    public findProductByIdWithHttpInfo(id: number, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/products/${id}`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling findProductById.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
            'application/vnd.api+json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];





        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     *
     * All products in the OpenFood database in JSON-API format.
     * @param include Include the Images and / or Nutrients in the returned JSON. Use \&quot;images\&quot; for Images and \&quot;nutrients\&quot; for Nutrients.
     * @param barcodes Array of barcodes to search by, using boolean OR for multiple values.
     * @param page Paging for the result set. Default products per page is 20.
     */
    public listProductsWithHttpInfo(include?: Array<string>, barcodes?: Array<number>, page?: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/products`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        if (include !== undefined) {
            queryParameters.set('include', <any>include);
        }
        if (barcodes !== undefined) {
            queryParameters.set('barcodes', <any>barcodes);
        }
        if (page !== undefined) {
            queryParameters.set('page', <any>page);
        }


        // to determine the Content-Type header
        let consumes: string[] = [
            'application/vnd.api+json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

}
